#
# In most cases, you only need to modify this first section.
#

LIB := libwlmdm.so

OBJS = src/conv.o src/table.o src/nvn.o src/vmap.o \
       src/wlmdm.o src/cms_helper.o src/special.o src/chanspec.o \
       src/scache.o src/gen_wlmdm_mapping.o src/gen_value_mapping.o

LIBS = $(CMS_CORE_LIBS) $(CMS_COMMON_LIBS) -lcms_msg -lstaged -ljson-c

all: conditional_build

.PHONY: test

CURR_DIR := $(shell pwd)
BUILD_DIR := $(subst /userspace, /userspace,$(CURR_DIR))
BUILD_DIR := $(word 1, $(BUILD_DIR))
include $(BUILD_DIR)/make.common

ifeq ($(strip $(DESKTOP_LINUX)),y)
BCM_BLT32_FLAGS := $(BCM_LD_FLAGS)
endif

ifneq ($(strip $(BUILD_BRCM_UNFWLCFG)),)
conditional_build: $(LIB) install
else
conditional_build:
	@echo "skipping $(LIB) (not configured)"
endif

GEN_WLMDM_TABLE = scripts/generate_wlmdm_table.pl
GEN_TAGGED_DMFILE = scripts/generate_tag_table.pl
SCRIPTS = $(GENERATE) scripts/GenNvmMappingNode.pm

ifneq ($(strip $(BUILD_TR98_PROFILES)),)
DMFILE := $(BUILD_DIR)/data-model/cms-dm-tr98.xml
TAGFILE := $(BUILD_DIR)/data-model/unfwlcfg/cms-dm-tr98-unfwlcfg-tags.xml
MAPPERFILE := $(BUILD_DIR)/data-model/unfwlcfg/value-mapper-tr98.xml
OBJS += src/tr98_helper.o src/tr98_special.o
CFLAGS += -DBUILD_TR98_PROFILES
else
DMFILE := $(BUILD_DIR)/data-model/cms-dm-tr181-wifi-unfwlcfg.xml
TAGFILE := $(BUILD_DIR)/data-model/unfwlcfg/cms-dm-tr181-wifi-unfwlcfg-tags.xml
MAPPERFILE := $(BUILD_DIR)/data-model/unfwlcfg/value-mapper-tr181.xml
OBJS += src/tr181_helper.o src/tr181_special.o
CFLAGS += -DBUILD_TR181_PROFILES
endif

export PERL5LIB = $(CURR_DIR)/scripts

NAME_MAPPING := src/gen_wlmdm_mapping.c src/gen_wlmdm_mapping.h
VALUE_MAPPING := src/gen_value_mapping.c src/gen_value_mapping.h
TAGGED_DMFILE := ./scripts/gen_tagged_datamodel.xml

$(NAME_MAPPING): $(TAGGED_DMFILE)
	perl $(GEN_WLMDM_TABLE) nmap $(TAGGED_DMFILE) $(CURR_DIR)/src

$(VALUE_MAPPING): $(MAPPERFILE)
	perl $(GEN_WLMDM_TABLE) vmap $(MAPPERFILE) $(CURR_DIR)/src

$(TAGGED_DMFILE): $(DMFILE) $(TAGFILE)
	perl $(GEN_TAGGED_DMFILE) mtag $(DMFILE) $(TAGFILE) $(CURR_DIR)/scripts

clean: generic_clean
	cd src; rm -f *.o *.d *.d.* core.* *.a $(LIB)
	cd test; rm -f test_nvn test_table test_vmap test_scache
	rm -f $(INSTALL_DIR)/lib$(BCM_INSTALL_SUFFIX_DIR)/$(LIB)
	rm -f $(BCM_FSBUILD_DIR)/private/lib/$(LIB)
	rm -f $(BCM_FSBUILD_DIR)/private/include/wlmdm_lib.h
	rm -f $(BCM_FSBUILD_DIR)/private/include/wifi_constants.h
	rm -rf src/gen_*
	rm -rf scripts/gen_*

binaryonly_dist_clean:
	if [ -a $(LIB) ]; then cp $(LIB) $(LIB)_$(PROFILE).save; fi;
	rm -f $(INSTALL_DIR)/lib/private/$(LIB)
	rm -f Makefile.fullsrc
	rm -f *.o *.d *.d.* core.* *.a output.txt $(LIB)
	rm -rf *.c *.h src scripts test


#
# Set our CommEngine directory (by splitting the pwd into two words
# at /userspace and taking the first word only).
# Then include the common defines under CommEngine.
#
#
# Private apps and libs are allowed to include header files from the
# private and public directories.
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_INCLUDE_PATHS := -I.\
                         -I./src \
                         -I../src \
                         -I$(BUILD_DIR)/userspace/public/include  \
                         -I$(BUILD_DIR)/userspace/public/include/$(OALDIR) \
                         -I$(BCM_FSBUILD_DIR)/public/include/json-c \
                         -I$(BUILD_DIR)/userspace/private/include  \
                         -I$(BUILD_DIR)/userspace/private/libs/staged  \
                         -I$(BUILD_DIR)/userspace/private/libs/cms_core \
                         -I$(BUILD_DIR)/userspace/private/libs/cms_core/linux

# Private apps and libs are allowed to link with libraries from the
# private and public directories.
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_LIB_DIRS := /lib:/lib/public:/lib/private

vpath %.c src

%.o: %.c
	$(CC) -c $(CFLAGS) $(BCM_BLT32_FLAGS) -o $@ $<

$(LIB): $(NAME_MAPPING) $(VALUE_MAPPING) $(OBJS)
	$(CC) -s -Os -fomit-frame-pointer -shared $(CFLAGS) $(BCM_BLT32_FLAGS) -o $(LIB) $(OBJS) $(LIBS) $(CMS_LIB_PATH)

install: generic_private_lib_install
	mkdir -p $(BCM_FSBUILD_DIR)/private/include
	install -m 644 src/wlmdm_lib.h $(BCM_FSBUILD_DIR)/private/include
	install -m 644 src/wifi_constants.h $(BCM_FSBUILD_DIR)/private/include

test: test/test_table test/test_nvn test/test_vmap test/test_scache

test/test_%: test/test_%.c
	$(CC) $(CFLAGS) $(BCM_BLT32_FLAGS) -o $@ $< $(LDFLAGS) -Wl,-rpath=$(CMS_LIB_RPATH) $(CMS_LIB_PATH) $(INCLUDE_DIR) -lwlmdm -lcms_util

#
# Include the rule for making dependency files.
# The '-' in front of the second include suppresses
# error messages when make cannot find the .d files.
# It will just regenerate them.
# See Section 4.14 of Gnu Make.
#

include $(BUILD_DIR)/make.deprules

-include $(OBJS:.o=.d)
