Index: htpdate-1.0.4/htpdate.c
===================================================================
--- htpdate-1.0.4.orig/htpdate.c
+++ htpdate-1.0.4/htpdate.c
@@ -51,6 +51,9 @@
 #include <limits.h>
 #include <pwd.h>
 #include <grp.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <sys/poll.h>
 
 #define VERSION 				"1.0.4"
 #define	MAX_HTTP_HOSTS			15				/* 16 web servers */
@@ -142,10 +145,106 @@ static void printlog( int is_error, char
 }
 
 
+static int opensock( struct addrinfo *ai )
+{
+    int rc;
+    int sock = -1;
+    struct addrinfo *pai;
+    int serr = -1;
+    socklen_t serr_len = sizeof(serr);
+
+    /* Traverse list of resolved hosts */
+    for (pai = ai; pai != NULL; pai = pai->ai_next)
+    {
+
+
+        sock = socket(pai->ai_family, pai->ai_socktype, pai->ai_protocol);
+        if (sock < 0)
+        {
+
+            goto retry;
+        }
+
+        int flags = fcntl(sock, F_GETFL);
+        if (flags  < 0)
+        {
+            goto retry;
+        }
+
+        if (fcntl(sock, F_SETFL, flags | O_NONBLOCK) == -1)
+        {
+            goto retry;
+        }
+
+        rc = connect(sock, pai->ai_addr, pai->ai_addrlen);
+
+        if (rc != 0)
+        {
+            if (errno != EINPROGRESS)
+            {
+                if (debug)
+                    printlog(1, "connect() failed: %s\n", strerror(errno));
+                goto retry;
+            }
+
+            /* Wait on connection */
+            struct pollfd pfd[1];
+
+            pfd[0].fd = sock;
+            pfd[0].events = POLLOUT;
+
+            rc = poll(pfd, sizeof(pfd) / sizeof(pfd[0]), 2000);
+            if (rc == 0)
+            {
+                goto retry;
+            }
+
+            if (pfd[0].events & POLLERR)
+            {
+                goto retry;
+            }
+
+            if (!(pfd[0].events & POLLOUT))
+            {
+                goto retry;
+            }
+
+            rc = getsockopt(sock, SOL_SOCKET, SO_ERROR, &serr, &serr_len);
+            if (rc != 0)
+            {
+                goto retry;
+            }
+
+            if (serr != 0)
+            {
+                goto retry;
+            }
+        }
+
+        /* Restore original flags */
+        if (fcntl(sock, F_SETFL, flags))
+        {
+            goto retry;
+        }
+
+        break;
+
+retry:
+        if (sock >= 0)
+        {
+            close(sock);
+            sock = -1;
+        }
+    }
+
+    return sock;
+}
+
+
 static long getHTTPdate( char *host, char *port, char *proxy, char *proxyport, char *httpversion, int ipversion, int when, int * error ) {
 	int					server_s;
 	int					rc;
-	struct addrinfo		hints, *res, *res0;
+	struct addrinfo		hints, *res0;
 	struct tm			tm;
 	struct timeval		timevalue = {LONG_MAX, 0};
 	struct timeval		timeofday;
@@ -198,26 +297,11 @@ static long getHTTPdate( char *host, cha
 	snprintf(buffer, BUFFERSIZE, "HEAD %s/ HTTP/1.%s\r\nHost: %s\r\nUser-Agent: htpdate/"VERSION"\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nConnection: close\r\n\r\n", url, httpversion, host);
 
 	/* Loop through the available canonical names */
-	res = res0;
-	do {
-		server_s = socket( res->ai_family, res->ai_socktype, res->ai_protocol );
-		if ( server_s < 0 ) {
-			continue;
-		}
-
-		rc = connect( server_s, res->ai_addr, res->ai_addrlen );
-		if ( rc ) {
-			close( server_s);
-			server_s = -1;
-			continue;
-		}
-
-		break;
-	} while ( ( res = res->ai_next ) );
+    server_s = opensock(res0);
 
 	freeaddrinfo(res0);
 
-	if ( rc ) {
+	if ( server_s < 0 ) {
         if ( debug )
 		    printlog( 1, "%s connection failed", host );
         *error = 1;
@@ -397,10 +481,7 @@ static int htpdate_plumeepoch( void ) {
     struct timeval  timeofday;
     int pepoch = 0;
 
-	if ( gettimeofday(&timeofday, NULL) )
-    {
-        printlog ( 1, "plume epoch" );
-    }
+	gettimeofday(&timeofday, NULL);
 
     if ( timeofday.tv_sec > PLUME_EPOCH )
         pepoch  = 1;
@@ -695,7 +776,7 @@ int main( int argc, char *argv[] ) {
      * or current date / time is after plume epoch (01/01/2016)
      * In that case we probably need just time adjust
      */
-    initset = htpdate_plumeepoch() ? 0 : 1;  
+    initset = htpdate_plumeepoch() ? 0 : 1;
 
 
 	/* Infinite poll cycle loop in daemonize mode */
