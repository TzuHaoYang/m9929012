This depends on backported changes from newer
kernels into the sdk's linux-4.1.

This essentially enables the CS00010701862 patch.
Without this change the original bcm patch has no
effect because none of the ifdefs would compile
in the associated changes.
diff -u b/bcmdrivers/broadcom/net/wl/impl69/main/src/wl/sys/wl_cfg80211.c b/bcmdrivers/broadcom/net/wl/impl69/main/src/wl/sys/wl_cfg80211.c
--- b/bcmdrivers/broadcom/net/wl/impl69/main/src/wl/sys/wl_cfg80211.c
+++ b/bcmdrivers/broadcom/net/wl/impl69/main/src/wl/sys/wl_cfg80211.c
@@ -729,7 +729,7 @@
 		struct net_device *ndev, const wl_event_msg_t *e, void *data);
 static s32 wl_notify_connect_status(struct bcm_cfg80211 *cfg,
 	bcm_struct_cfgdev *cfgdev, const wl_event_msg_t *e, void *data);
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static s32 wl_dfs_cac_notify_status(struct bcm_cfg80211 *cfg,
 	bcm_struct_cfgdev *cfgdev, const wl_event_msg_t *e, void *data);
 #endif /* KERNEL_VERSION(4, 19, 0) */
@@ -1064,7 +1064,7 @@
 	cfg80211_ready_on_channel(cfgdev, cookie, channel, channel_type, duration, GFP_KERNEL);
 #endif /* WL_CFG80211_P2P_DEV_IF */
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static void
 wl_cfg80211_set_cac_state_change_eventbits(struct bcm_cfg80211 *cfg);
 #endif /* KERNEL_VERSION(4, 19, 0)) */
@@ -13417,14 +13417,14 @@
 #endif /* WL_SUPPORT_ACS */
 
 int wl_chspec_chandef(chanspec_t chanspec,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
         struct cfg80211_chan_def *chandef,
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION (3, 5, 0) && (LINUX_VERSION_CODE <= (3, 7, 0)))
         struct chan_info *chaninfo,
 #endif /* (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 5, 0)) */
 struct wiphy *wiphy);
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static int
 wl_cfg80211_get_channel(struct wiphy *wiphy, struct wireless_dev *wdev,
 	struct cfg80211_chan_def *chandef)
@@ -13521,7 +13521,7 @@
 #ifdef WL_SAE
 	.external_auth = wl_cfg80211_external_auth,
 #endif /* WL_SAE */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 	.get_channel = wl_cfg80211_get_channel,
 #endif
 };
@@ -14179,7 +14179,7 @@
 	return BCME_OK;
 }
 #endif /* WL_SAE */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static s32
 wl_dfs_cac_notify_status(struct bcm_cfg80211 *cfg,
 	bcm_struct_cfgdev *cfgdev, const wl_event_msg_t *e, void *data)
@@ -17060,7 +17060,7 @@
 	cfg->evt_handler[WLC_E_BT_WIFI_HANDOVER_REQ] = wl_notify_bt_wifi_handover_req;
 #endif // endif
 	cfg->evt_handler[WLC_E_CSA_COMPLETE_IND] = wl_csa_complete_ind;
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 	cfg->evt_handler[WLC_E_CAC_STATE_CHANGE] = wl_dfs_cac_notify_status;
 #endif /* KERNEL_VERSION(4, 19, 0) */
 	cfg->evt_handler[WLC_E_AP_STARTED] = wl_ap_start_ind;
@@ -17080,7 +17080,7 @@
 	cfg->evt_handler[WLC_E_BAND_CHANGE] = wl_cfg80211_band_change;
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static void
 wl_cfg80211_set_cac_state_change_eventbits(struct bcm_cfg80211 *cfg) {
 	wl_eventmsg_buf_t ev_buf;
@@ -18767,7 +18767,7 @@
 	wl_cfg80211_init_wds_info(cfg);
 #endif /* WL_HAPD_WDS */
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 	wl_cfg80211_set_cac_state_change_eventbits(cfg);
 #endif /* KERNEL_VERSION(4, 19, 0)) */
 
diff -u b/bcmdrivers/broadcom/net/wl/impl69/sys/src/wl/sys/wl_cfg80211.c b/bcmdrivers/broadcom/net/wl/impl69/sys/src/wl/sys/wl_cfg80211.c
--- b/bcmdrivers/broadcom/net/wl/impl69/sys/src/wl/sys/wl_cfg80211.c
+++ b/bcmdrivers/broadcom/net/wl/impl69/sys/src/wl/sys/wl_cfg80211.c
@@ -729,7 +729,7 @@
 		struct net_device *ndev, const wl_event_msg_t *e, void *data);
 static s32 wl_notify_connect_status(struct bcm_cfg80211 *cfg,
 	bcm_struct_cfgdev *cfgdev, const wl_event_msg_t *e, void *data);
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static s32 wl_dfs_cac_notify_status(struct bcm_cfg80211 *cfg,
 	bcm_struct_cfgdev *cfgdev, const wl_event_msg_t *e, void *data);
 #endif /* KERNEL_VERSION(4, 19, 0) */
@@ -1064,7 +1064,7 @@
 	cfg80211_ready_on_channel(cfgdev, cookie, channel, channel_type, duration, GFP_KERNEL);
 #endif /* WL_CFG80211_P2P_DEV_IF */
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static void
 wl_cfg80211_set_cac_state_change_eventbits(struct bcm_cfg80211 *cfg);
 #endif /* KERNEL_VERSION(4, 19, 0)) */
@@ -13417,14 +13417,14 @@
 #endif /* WL_SUPPORT_ACS */
 
 int wl_chspec_chandef(chanspec_t chanspec,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
         struct cfg80211_chan_def *chandef,
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION (3, 5, 0) && (LINUX_VERSION_CODE <= (3, 7, 0)))
         struct chan_info *chaninfo,
 #endif /* (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 5, 0)) */
 struct wiphy *wiphy);
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static int
 wl_cfg80211_get_channel(struct wiphy *wiphy, struct wireless_dev *wdev,
 	struct cfg80211_chan_def *chandef)
@@ -13521,7 +13521,7 @@
 #ifdef WL_SAE
 	.external_auth = wl_cfg80211_external_auth,
 #endif /* WL_SAE */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 	.get_channel = wl_cfg80211_get_channel,
 #endif
 };
@@ -14179,7 +14179,7 @@
 	return BCME_OK;
 }
 #endif /* WL_SAE */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static s32
 wl_dfs_cac_notify_status(struct bcm_cfg80211 *cfg,
 	bcm_struct_cfgdev *cfgdev, const wl_event_msg_t *e, void *data)
@@ -17060,7 +17060,7 @@
 	cfg->evt_handler[WLC_E_BT_WIFI_HANDOVER_REQ] = wl_notify_bt_wifi_handover_req;
 #endif // endif
 	cfg->evt_handler[WLC_E_CSA_COMPLETE_IND] = wl_csa_complete_ind;
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 	cfg->evt_handler[WLC_E_CAC_STATE_CHANGE] = wl_dfs_cac_notify_status;
 #endif /* KERNEL_VERSION(4, 19, 0) */
 	cfg->evt_handler[WLC_E_AP_STARTED] = wl_ap_start_ind;
@@ -17080,7 +17080,7 @@
 	cfg->evt_handler[WLC_E_BAND_CHANGE] = wl_cfg80211_band_change;
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 static void
 wl_cfg80211_set_cac_state_change_eventbits(struct bcm_cfg80211 *cfg) {
 	wl_eventmsg_buf_t ev_buf;
@@ -18767,7 +18767,7 @@
 	wl_cfg80211_init_wds_info(cfg);
 #endif /* WL_HAPD_WDS */
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
+#if 1 || (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0))
 	wl_cfg80211_set_cac_state_change_eventbits(cfg);
 #endif /* KERNEL_VERSION(4, 19, 0)) */
 
