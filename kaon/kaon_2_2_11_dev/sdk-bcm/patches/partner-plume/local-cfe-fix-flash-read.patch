Use byte-per-byte copying from NAND flash cache to RAM.

Also, the existing functionality using the ARM intrinsics
presumed that the length of requested data was aligned
to 4/8 bytes.
--- a/shared/opensource/flash/nandflash.c
+++ b/shared/opensource/flash/nandflash.c
@@ -1889,8 +1889,10 @@ extern inline void nandflash_copy_from_c
     int offset, int numbytes)
 {
     volatile unsigned char *cache = NAND_CACHE;
+#if 0
     unsigned int i, tmp;
     unsigned int* buf = (unsigned int*)buffer;
+#endif
 
 #if defined(_BCM947189_)
                 {
@@ -1900,6 +1902,7 @@ extern inline void nandflash_copy_from_c
                 }
 #endif
 
+#if 0
     if( ((uintptr_t)buffer&0x3) )
     {
         for( i = 0; i < numbytes; i += sizeof(int) )
@@ -1961,6 +1964,16 @@ extern inline void nandflash_copy_from_c
             }
         }
     }
+#else
+    uint8_t *b8 = (uint8_t *)buffer;
+    int i;
+
+    for (i = 0; i < numbytes; i++)
+    {
+        *b8 = cache[i + offset];
+        b8++;
+    }
+#endif
 
 #if defined(_BCM947189_)
                 {
