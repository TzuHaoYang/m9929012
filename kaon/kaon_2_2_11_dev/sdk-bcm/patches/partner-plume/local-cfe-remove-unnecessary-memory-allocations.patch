--- a/cfe/cfe/board/bcm63xx_ram/src/bcm63xx_util.c
+++ b/cfe/cfe/board/bcm63xx_ram/src/bcm63xx_util.c
@@ -826,12 +826,6 @@ PFILE_TAG getTagFromPartition(int imageN
         struct jffs2_raw_dirent *pdir;
         struct ubi_ec_hdr *ec = NULL;
         unsigned int version = 0;
-	
-        NVRAM_DATA *nvramData = KMALLOC(sizeof(NVRAM_DATA),sizeof(void*));
-        if (!nvramData) {
-            return NULL;
-        }
-        NVRAM_COPY_TO(nvramData);
 
 #if !defined(_BCM960333_) && !defined(_BCM96848_) && !defined(_BCM947189_)
         /* If full (field) secure boot is in play, the CFE RAM file is the encrypted version */
@@ -896,7 +890,6 @@ PFILE_TAG getTagFromPartition(int imageN
 
             unsigned char* buf = KMALLOC(len + 1024, sizeof(void*));
             if (!buf) {
-                KFREE(nvramData);
                 return NULL;
             }
             start_blk = NVRAM.ulNandPartOfsKb[rootfs] / (len / 1024);
@@ -1009,7 +1002,6 @@ PFILE_TAG getTagFromPartition(int imageN
             }
             KFREE(buf);
         }
-	KFREE(nvramData);
     }
     
     break;
--- a/shared/opensource/flash/nandflash.c
+++ b/shared/opensource/flash/nandflash.c
@@ -1408,12 +1408,14 @@ static int nand_is_blk_cleanmarker(PCFE_
 {
     unsigned short cleanmarker[] = JFFS2_CLEANMARKER;
     unsigned char *pcm = (unsigned char *) cleanmarker;
-    unsigned char *spare = KMALLOC(SPARE_MAX_SIZE, 0);
-    unsigned char *comparebuf = KMALLOC(SPARE_MAX_SIZE, 0);
+    unsigned char spare[SPARE_MAX_SIZE];
+    unsigned char comparebuf[SPARE_MAX_SIZE];
     unsigned char *spare_mask = pchip->chip_spare_mask;
     unsigned int i, j;
     int ret = 1;
 
+    memset(spare, 0, sizeof(spare));
+    memset(comparebuf, 0, sizeof(comparebuf));
     if( nandflash_read_spare_area( pchip, start_addr, spare,
         pchip->chip_spare_size) == FLASH_API_OK )
     {
@@ -1437,9 +1439,6 @@ static int nand_is_blk_cleanmarker(PCFE_
         ret = 0;   
     }
 
-    KFREE(spare);
-    KFREE(comparebuf);
-
     return( ret );
 } /* nand_is_blk_cleanmarker */
 
@@ -1452,10 +1451,12 @@ static int nand_is_blk_cleanmarker(PCFE_
  ***************************************************************************/
 static int nand_initialize_spare_area(PCFE_NAND_CHIP pchip, int eraseBadBlocks)
 {
-    unsigned char *spare = KMALLOC(SPARE_MAX_SIZE, 0);
+    unsigned char spare[SPARE_MAX_SIZE];
     unsigned int i;
     int ret;
 
+    memset(spare, 0, sizeof(spare));
+
     DBG_PRINTF(">> nand_initialize_spare_area - entry\n");
 
     for( i = 0; i < pchip->chip_total_size; i += pchip->chip_block_size )
@@ -1477,7 +1478,6 @@ static int nand_initialize_spare_area(PC
         }
     }
 
-    KFREE(spare);
     return( FLASH_API_OK );
 } /* nand_initialize_spare_area */
 
@@ -1491,17 +1491,17 @@ static int nand_initialize_spare_area(PC
 static void nand_mark_bad_blk(PCFE_NAND_CHIP pchip, unsigned long page_addr)
 {
     static int marking_bad_blk = 0;
-    unsigned char *spare;
+    unsigned char spare[SPARE_MAX_SIZE];
     unsigned int blk = page_addr/pchip->chip_block_size;
-    
+
+    memset(spare, 0, sizeof(spare));
+
     if (nand_is_blk_bad(pchip, blk))
     {
         printf("nand_mark_bad_blk() : Attempting to mark a bad block %d that is already bad.\n", blk);
         return ;
     }
 
-    spare = KMALLOC(SPARE_MAX_SIZE, 0);
-
     if( marking_bad_blk == 0 )
     {
         marking_bad_blk = 1;
@@ -1533,7 +1533,6 @@ static void nand_mark_bad_blk(PCFE_NAND_
         marking_bad_blk = 0;
     }
 
-    KFREE(spare);
 } /* nand_mark_bad_blk */
 
 
@@ -2225,7 +2224,7 @@ static int nandflash_check_ecc(void)
 static int check_ecc_for_ffs(PCFE_NAND_CHIP pchip, UINT32 step)
 {
     int ret = 1;
-    UINT8 *spare = KMALLOC(32, 0);
+    UINT8 spare[32];
     UINT8 *spare_mask = pchip->chip_spare_mask;
     UINT32 i, j = step * pchip->chip_spare_step_size;
 
@@ -2240,7 +2239,6 @@ static int check_ecc_for_ffs(PCFE_NAND_C
         }
     }
 
-    KFREE(spare);
     return( ret );
 }
 
@@ -2253,10 +2251,13 @@ static int nandflash_write_spare_area(PC
     unsigned long page_addr, unsigned char *buffer, int len)
 {
     int ret = FLASH_API_OK;
-    unsigned char * nand_cache = KMALLOC(CTRLR_CACHE_SIZE, 0);
-    unsigned char * spare = KMALLOC(SPARE_MAX_SIZE, 0);
+    unsigned char nand_cache[CTRLR_CACHE_SIZE];
+    unsigned char spare[SPARE_MAX_SIZE];
     unsigned int is_mlc = 1;
 
+    memset(nand_cache, 0, sizeof(nand_cache));
+    memset(spare, 0, sizeof(spare));
+
     if( len <= pchip->chip_spare_size )
     {
         unsigned int acc_save;
@@ -2312,9 +2313,6 @@ static int nandflash_write_spare_area(PC
     else
         ret = FLASH_API_ERROR;
 
-    KFREE(nand_cache);
-    KFREE(spare);
-
     return( ret );
 } /* nandflash_write_spare_area */
 #endif
@@ -2507,10 +2505,12 @@ static int badBlk[MAX_NUM_BTLDR_DUP * NU
 static int check_btrm_ecc_for_ffs(PCFE_NAND_CHIP pchip, UINT32 step)
 {
     int ret = 1;
-    UINT8 *spare = KMALLOC(32, 0);
+    UINT8 spare[32];
     UINT8 *spare_mask = pchip->chip_spare_mask;
     UINT32 i, j = step * pchip->chip_spare_step_size;
 
+    memset(spare, 0, sizeof(spare));
+
     nandflash_copy_from_spare(spare, pchip->chip_spare_step_size);
     for( i = 0; i < pchip->chip_spare_step_size; i++, j++ )
     {
@@ -2521,8 +2521,6 @@ static int check_btrm_ecc_for_ffs(PCFE_N
         }
     }
 
-    KFREE(spare);
-
     return( ret );
 }
 
@@ -3197,9 +3195,11 @@ void dump_spare(void);
 void dump_spare(void)
 {
     PCFE_NAND_CHIP pchip = &g_chip;
-    unsigned char * spare = KMALLOC(SPARE_MAX_SIZE, 0);
+    unsigned char spare[SPARE_MAX_SIZE];
     unsigned int i;
 
+    memset(spare, 0, sizeof(spare));
+
     for( i = 0; i < pchip->chip_total_size; i += pchip->chip_block_size )
     {
         if( nandflash_read_spare_area(pchip, i, spare,
@@ -3224,19 +3224,19 @@ void dump_spare(void)
         else
             printf("Error reading spare 0x%8.8x\n", i);
     }
-
-    KFREE(spare);
 }
 
 int read_spare_data(int blk, int offset, unsigned char *buf, int bufsize, int read_all_oob);
 int read_spare_data(int blk, int offset, unsigned char *buf, int bufsize, int read_all_oob)
 {
     PCFE_NAND_CHIP pchip = &g_chip;
-    unsigned char * spare = KMALLOC(SPARE_MAX_SIZE, 0);
+    unsigned char spare[SPARE_MAX_SIZE];
     unsigned long page_addr = (blk * pchip->chip_block_size) + offset;
     unsigned int i, j;
     int ret;
 
+    memset(spare, 0, sizeof(spare));
+
     if( (ret = nandflash_read_spare_area( pchip, page_addr, spare,
         pchip->chip_spare_size)) == FLASH_API_OK )
     {
@@ -3259,7 +3259,6 @@ int read_spare_data(int blk, int offset,
         }
     }
 
-    KFREE(spare);
     return(ret);
 }
 
@@ -3267,11 +3266,13 @@ int dump_spare_pages(int blk);
 int dump_spare_pages(int blk)
 {
     PCFE_NAND_CHIP pchip = &g_chip;
-    unsigned char * spare = KMALLOC(SPARE_MAX_SIZE / 4, 0);
+    unsigned char spare[SPARE_MAX_SIZE / 4];
     unsigned long page_addr = blk * pchip->chip_block_size;
     unsigned int i;
     int ret = 0;
 
+    memset(spare, 0, sizeof(spare));
+
     for( i = 0; i < 6; i++ )
     {
         if( (ret = nandflash_read_spare_area( pchip, page_addr +
@@ -3292,7 +3293,6 @@ int dump_spare_pages(int blk)
         }
     }
 
-    KFREE(spare);
     return(ret);
 }
 #endif
