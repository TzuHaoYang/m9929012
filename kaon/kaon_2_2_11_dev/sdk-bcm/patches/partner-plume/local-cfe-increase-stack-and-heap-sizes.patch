These are not protected by any ifdefs.

Some profiles (eg refboard) can simply opt out of
re-building cfe altogether to skip over this change.

Note: The undefs at the beginning are required.
The header file gets included multiple times in
some files and since there are no guarding
ifdef-define-endif at the file start/end, it was
causing build errors. Normally this wasn't a
problem because redefining a macro with the same
value is considered legal by the preprocessor. My
undef-define override ended up with 2 different
values upon re-inclusion of the header file.

I'm not going to add guards for this file since
the damn thing might as well require this
re-inclusion property to work for some other
defines.
--- a/cfe/cfe/board/bcm63xx_ram/include/bsp_config.h
+++ b/cfe/cfe/board/bcm63xx_ram/include/bsp_config.h
@@ -46,6 +46,14 @@
     ********************************************************************* */
 #include "bcm_cpu.h"
 
+#ifdef CFG_STACK_SIZE
+#undef CFG_STACK_SIZE
+#endif
+
+#ifdef CFG_HEAP_SIZE
+#undef CFG_HEAP_SIZE
+#endif
+
 #if defined(CP0_CMT_TPID)
 #define CFG_CMT         1
 #else
@@ -73,6 +81,9 @@
 #define CFG_HEAP_SIZE           1024   /* heap size in kilobytes */
 #endif
 
+#undef CFG_HEAP_SIZE
+#define CFG_HEAP_SIZE           (60*1024)   /* heap size in kilobytes */
+
 /* some cfe rom run in LMEM and only has 512KB space.  Heap for cfe
 rom is used for LZMA decompression scratch pad(NOR boot) or NAND block
 buf(NAND boot). 256KB is big enough for now. */
@@ -111,6 +122,9 @@ buf(NAND boot). 256KB is big enough for
 #define CFG_STACK_SIZE          8192   /* stack size (bytes, rounded up to K) */
 #endif
 
+#undef CFG_STACK_SIZE
+#define CFG_STACK_SIZE          (256*1024)   /* stack size (bytes, rounded up to K) */
+
 #ifndef IKOS_FAST_UART
 #define CFG_SERIAL_BAUD_RATE	115200	/* normal console speed */
 #else
