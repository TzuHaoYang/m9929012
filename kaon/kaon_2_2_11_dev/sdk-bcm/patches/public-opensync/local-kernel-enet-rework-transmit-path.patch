ESW-2365: enet: cleanup and remove unwanted and unused code in enet driver for transmit path

By removing the code for checking if the packet is a high priority
packet, we are gaining about 20 Mbps of network throughput.
Note that there is no difference in handling and transmission of
the packet if the mark (high priority flag) is set or not.

Disable the code which prepends the ethernet frame with another
Broadcom ethernet type.
There is still a possibility that the buffer to send is of type pkbuff,
instead of skbuff. In this case, the ethernet frame will still be
prepended with additional ethernet type.

The reason for removing this code is that we won't be sending that
kind of ethernet frames on the local ethernet network.

Also, the code for padding a smaller-than-minimum ethernet frame
to 60 bytes is not doing what it should. It pads the ethernet
frame to the 58 byte limit only.
--- a/bcmdrivers/opensource/net/enet/impl5/bcmenet.c
+++ b/bcmdrivers/opensource/net/enet/impl5/bcmenet.c
@@ -140,7 +140,7 @@ static int bcm63xx_enet_close(struct net
 static void bcm63xx_enet_timeout(struct net_device * dev);
 static int bcm63xx_enet_poll_timer(void * arg);
 static int bcm63xx_enet_xmit(pNBuff_t pNBuff, struct net_device * dev);
-static inline int bcm63xx_enet_xmit2(struct net_device *dev, EnetXmitParams *pParam);
+static int bcm63xx_enet_xmit2(struct net_device *dev, EnetXmitParams *pParam);
 static struct rtnl_link_stats64 * bcm63xx_enet_query(struct net_device * dev, struct rtnl_link_stats64 *storage);
 static int bcm63xx_enet_change_mtu(struct net_device *dev, int new_mtu);
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 4, 1)
@@ -1506,6 +1506,8 @@ static inline uint16_t bcmenet_load_bala
 #else
 #define bcmenet_load_balance_imp(port_id, pHdr) 0
 #endif /* CONFIG_BCM_ENET_MULTI_IMP_SUPPORT */
+
+#if 0
 static struct sk_buff *bcm63xx_skb_put_tag(struct sk_buff *skb,
         struct net_device *dev, unsigned int port_map)
 {
@@ -1584,6 +1586,7 @@ static struct sk_buff *bcm63xx_skb_put_t
     }
     return skb;
 }
+#endif
 
 static inline void bcm63xx_fkb_put_tag(FkBuff_t * fkb_p,
         struct net_device * dev, unsigned int port_map)
@@ -1623,21 +1626,6 @@ EXPORT_SYMBOL(bcmenet_register_moca_fc_b
 
 
 
-
-void inline get_mark_pNbuff(pNBuff_t *pNBuff, uint32_t **mark)
-{
-    void * pBuf = PNBUFF_2_PBUF(pNBuff);
-
-     if ( IS_SKBUFF_PTR(pNBuff) )
-    {
-        *mark = (uint32_t *)&(((struct sk_buff *)pBuf)->mark);
-    }
-    else
-    {
-        *mark = (uint32_t *)&(((FkBuff_t *)pBuf)->mark); 
-    }
-}
-
 /* --------------------------------------------------------------------------
 Name: bcm63xx_enet_xmit
 Purpose: Send ethernet traffic
@@ -1650,7 +1638,6 @@ static int bcm63xx_enet_xmit(pNBuff_t pN
 #endif
     EnetXmitParams param = { {0}, 0};
     int ret;
-    uint32_t *mark;
 
 #if defined(PKTC)
     /* for PKTC, pNBuff is chained skb */
@@ -1668,27 +1655,6 @@ static int bcm63xx_enet_xmit(pNBuff_t pN
         param.pNBuff = pNBuff;
         BCM_ENET_TX_DEBUG("The physical port_id is %d\n", param.port_id);
 
-        get_mark_pNbuff(pNBuff, &mark);
-        param.pDevPriv->estats.tx_packets_queue_in[SKBMARK_GET_Q_PRIO(*mark)]++;
-
-#if defined(CONFIG_BCM963268) || defined(CONFIG_BCM63381) || defined(CONFIG_BCM947189)
-        /* Packet is NOT chained && is_SKB && Not_Classified_by_Kernel */
-        if (!is_chained && IS_SKBUFF_PTR(pNBuff) && !SKBMARK_GET_FLOW_ID(*mark))
-        {
-            struct sk_buff *skb = PNBUFF_2_SKBUFF(pNBuff);
-            int hiPrioFlag=0;
-            check_arp_lcp_pkt(skb->data, hiPrioFlag);
-            if (hiPrioFlag)
-            {
-                uint32_t hiPrioQ = MAX_PRIORITY_VALUE;
-                /* Give the highest possible priority to ARP/LCP packets */
-                *mark = SKBMARK_SET_Q_PRIO(*mark, hiPrioQ);
-            }
-        }   
-#endif
-
-        /* Do driver level queue remapping */
-        bcmeapi_enet_prepare_xmit(dev, mark);
 
         if (nbuff_get_params_ext(pNBuff, &param.data, &param.len,
                     &param.mark, &param.priority, &param.r_flags) == NULL)
@@ -1698,10 +1664,11 @@ static int bcm63xx_enet_xmit(pNBuff_t pN
             param.pDevPriv->estats.tx_dropped_bad_nbuff++;
             return 0;
         }
-
+        param.pDevPriv->estats.tx_packets_queue_in[SKBMARK_GET_Q_PRIO(param.mark)]++;
+#if 0
         if (global.dump_enable)
             DUMP_PKT(param.data, param.len);
-
+#endif
 #ifdef USE_DEFAULT_EGRESS_QUEUE
         if (param.pDevPriv->use_default_txq)
         {
@@ -1738,7 +1705,7 @@ static int bcm63xx_enet_xmit(pNBuff_t pN
     return ret;
 }
 
-static inline int bcm63xx_enet_xmit2(struct net_device *dev, EnetXmitParams *pParam)
+static int bcm63xx_enet_xmit2(struct net_device *dev, EnetXmitParams *pParam)
 {
     unsigned int port_map ; 
 
@@ -1758,10 +1725,8 @@ static inline int bcm63xx_enet_xmit2(str
     }
     bcmeapi_get_tx_queue(pParam);
 
-        {
-           pParam->blog_chnl = pParam->port_id;
-           pParam->blog_phy  = BLOG_ENETPHY;
-        }
+    pParam->blog_chnl = pParam->port_id;
+    pParam->blog_phy  = BLOG_ENETPHY;
 
 #ifdef CONFIG_BLOG
     /*
@@ -1771,11 +1736,11 @@ static inline int bcm63xx_enet_xmit2(str
     if (pParam->is_chained == FALSE)
     {
 #if defined(CONFIG_BCM_ENET_MULTI_IMP_SUPPORT)
-        if (IS_SKBUFF_PTR(pParam->pNBuff))
+        if (pParam->skb)
         {
-            if (PNBUFF_2_SKBUFF(pParam->pNBuff)->blog_p)
+            if (pParam->skb->blog_p)
             {
-                PNBUFF_2_SKBUFF(pParam->pNBuff)->blog_p->lag_port = pParam->lag_port;
+                pParam->skb->blog_p->lag_port = pParam->lag_port;
             }
         }
 #endif /* CONFIG_BCM_ENET_MULTI_IMP_SUPPORT */
@@ -1812,9 +1777,11 @@ static inline int bcm63xx_enet_xmit2(str
             pParam->len  = pParam->pFkb->len;
             pParam->pNBuff = PBUF_2_PNBUFF((void*)pParam->pFkb,FKBUFF_PTR);
         } else {
+#if 0
             ENET_TX_UNLOCK();
             pParam->skb = bcm63xx_skb_put_tag(pParam->skb, dev, GET_PORTMAP_FROM_LOGICAL_PORTMAP(port_map,1));    /* Portmap for external switch and also pads to 0 */
             ENET_TX_LOCK();
+#endif
             if (pParam->skb == NULL) {
                 global.pVnetDev0_g->stats.tx_dropped++;
                 pParam->vstats->tx_dropped++;
@@ -1835,18 +1802,7 @@ static inline int bcm63xx_enet_xmit2(str
         nbuff_get_context(pParam->pNBuff, &pParam->data, (uint32_t *)&pParam->len);
     }
 
-    if (bcmenet_dp_lookup_cb != NULL)
-    {
-        pParam->drop_eligible = bcmenet_dp_lookup_cb(dev, pParam->data, pParam->len);
-    }
-
-    switch(bcmeapi_pkt_xmt_dispatch(pParam))
-    {
-        case BCMEAPI_CTRL_SKIP:
-            goto unlock_drop_exit;
-        default:
-            break;
-    }
+    bcmeapi_pkt_xmt_dispatch(pParam);
 
 #ifdef DYING_GASP_API
     /* If in dying gasp, abort housekeeping since we're about to power down */
--- a/bcmdrivers/opensource/net/enet/shared/bcmenet_dma_inline.h
+++ b/bcmdrivers/opensource/net/enet/shared/bcmenet_dma_inline.h
@@ -307,10 +307,6 @@ static inline int fapTxChannelSkb(struct
 }
 #endif /* defined(_CONFIG_BCM_FAP) */
 
-static inline void bcmeapi_enet_prepare_xmit(struct net_device *dev, uint32_t *mark)
-{
-}
-
 static inline void bcmeapi_get_tx_queue(EnetXmitParams *pParam)
 {
 #if defined(_CONFIG_BCM_FAP)
