
+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/data-model/cms-dm-bcm-features.xml
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/data-model/cms-dm-bcm-features.xml

@@ -380,6 +380,9 @@
   <parameter name="WlanNvram" type="string" specSource="Broadcom" profile="Unspecified" supportLevel="ReadWrite" defaultValue="" />
     <description source="BROADCOM">nvram string: format:name=string|name=string|...</description>
 
+  <parameter name="WlanUnsetNvram" type="string" specSource="Broadcom" profile="Unspecified" supportLevel="ReadWrite" defaultValue="" />
+    <description source="BROADCOM">nvram string: format:name=string|name=string|...</description>
+
 
 <vsaInfo>
 

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/data-model/cms-dm-tr181-wifi-eap.xml
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/data-model/cms-dm-tr181-wifi-eap.xml

@@ -34,6 +34,8 @@
   <parameter name="X_BROADCOM_COM_WlNvram" type="string" specSource="TR181" profile="Device2_WiFiRadio:1" requirements="W" supportLevel="ReadWrite" />
     <description source="TRx">NVRAM extra information</description>
 
+  <parameter name="X_BROADCOM_COM_WlUnsetNvram" type="string" specSource="TR181" profile="Device2_WiFiRadio:1" requirements="W" supportLevel="ReadWrite" />
+    <description source="TRx">Unset NVRAM extra information</description>
 
 
 

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/data-model/cms-dm-tr181-wifi-unfwlcfg.xml
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/data-model/cms-dm-tr181-wifi-unfwlcfg.xml

@@ -34,6 +34,8 @@
   <parameter name="X_BROADCOM_COM_WlNvram" type="string" specSource="TR181" profile="Device2_WiFiRadio:1" requirements="W" supportLevel="ReadWrite" />
     <description source="TRx">NVRAM extra information</description>
 
+  <parameter name="X_BROADCOM_COM_WlUnsetNvram" type="string" specSource="TR181" profile="Device2_WiFiRadio:1" requirements="W" supportLevel="ReadWrite" />
+    <description source="TRx">Unset NVRAM extra information</description>
 
 
 

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/cms_helper.h
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/cms_helper.h

@@ -122,4 +122,9 @@
  */
 void get_wlnvram_pathDesc(MdmPathDescriptor *pathDesc);
 
+/*
+ * Get the pathDesc for unset NVRAM storage node in the MDM.
+ */
+void get_wlUnsetNvram_pathDesc(MdmPathDescriptor *pathDesc);
+
 #endif

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/conv.c
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/conv.c

@@ -75,28 +75,37 @@
 static WlmdmRet conv_get_unmapped(const char *nvname, char *value, size_t value_len);
 static WlmdmRet conv_unmapped_foreach(nvc_for_each_func for_each_func, void *data);
 static WlmdmRet conv_mapped_foreach(nvc_for_each_func instance_func, void *data);
+static WlmdmRet conv_get_unset(const char *nvname);
+static WlmdmRet conv_add_unset(const char *nvname);
+static WlmdmRet conv_del_unset(const char *nvname);
 
 static char *get_unmapped_list();
 static WlmdmRet set_unmapped_list(const char *nlist);
 static char* convert_value(MdmParamTypes from, MdmParamTypes to, const char *value);
 static WlmdmRet get_nvram_from_pathDesc(const MdmPathDescriptor *pathDesc, const NvmParamMapping *p,
                                      char *value, size_t size);
+static WlmdmRet set_unset_list(const char *nlist);
+static char *get_unset_list(void);
 
 static ParamTable scache_value_table;
 static char *unmapped_list = NULL;
-
+static char *unset_list = NULL;
 
 WlmdmRet conv_get(const char *nvname, char *value, size_t size)
 {
     WlmdmRet ret;
 
-    ret = special_get(nvname, value, size);
+    ret = conv_get_unset(nvname);
     if (ret == WLMDM_NOT_FOUND)
     {
-        ret = conv_get_mapped(nvname, value, size);
+        ret = special_get(nvname, value, size);
         if (ret == WLMDM_NOT_FOUND)
         {
-            ret = conv_get_unmapped(nvname, value, size);
+            ret = conv_get_mapped(nvname, value, size);
+            if (ret == WLMDM_NOT_FOUND)
+            {
+                ret = conv_get_unmapped(nvname, value, size);
+            }
         }
     }
     return ret;
@@ -106,6 +115,8 @@
 {
     WlmdmRet ret;
 
+    conv_del_unset(nvname);
+
     ret = special_set(nvname, value);
     if (ret == WLMDM_NOT_FOUND)
     {
@@ -123,6 +134,8 @@
 {
     WlmdmRet ret = WLMDM_OK;
 
+    conv_add_unset(nvname);
+
     if (!conv_is_mapped(nvname))
     {
         ret = conv_unset_unmapped(nvname);
@@ -142,6 +155,7 @@
 {
     scache_init(&scache_value_table);
     unmapped_list = get_unmapped_list();
+    unset_list = get_unset_list();
     return WLMDM_OK;
 }
 
@@ -192,6 +206,13 @@
         goto exit;
     }
 
+    ret = set_unset_list(unset_list);
+    if (ret != WLMDM_OK)
+    {
+        cmsLog_error("Failed to apply unset list!");
+        goto exit;
+    }
+
     if (cms_try_lock(&locked_here) != WLMDM_OK)
     {
         ret = WLMDM_GENERIC_ERROR;
@@ -214,6 +235,11 @@
         unmapped_list = NULL;
     }
 
+    if (unset_list != NULL)
+    {
+        free(unset_list);
+        unset_list = NULL;
+    }
     return ret;
 }
 
@@ -519,6 +545,150 @@
     return ret;
 }
 
+/*
+ * Add or Update the given nvram configuration into 
+ * Device.Wifi.X_BROADCOM_COM_WlUnsetNvram.
+ */
+static WlmdmRet conv_add_unset(const char *nvname)
+{
+    WlmdmRet ret = WLMDM_OK;
+    char *new;
+
+    /* unset_list should be prepared in conv_prepare_save(). */
+    new = nvc_list_update(unset_list, nvname, NULL);
+    if (new != NULL)
+    {
+        free(unset_list);
+        unset_list = new;
+    }
+    else
+    {
+        ret = WLMDM_GENERIC_ERROR;
+    }
+
+    return ret;
+}
+
+/*
+ * Search Device.Wifi.X_BROADCOM_COM_WlUnsetNvram for the specified nvname.
+ * If found, delete the entry. Otherwise do nothing.
+ */
+static WlmdmRet conv_del_unset(const char *nvname)
+{
+    WlmdmRet ret = WLMDM_OK;
+    char *new;
+
+    /* unset_list should be prepared in conv_prepare_save(), but it could be NULL */
+    if (unset_list == NULL)
+    {
+        return WLMDM_OK;
+    }
+
+    new = nvc_list_delete(unset_list, nvname);
+    if (new != NULL)
+    {
+        free(unset_list);
+        unset_list = new;
+    }
+    else
+    {
+        ret = WLMDM_GENERIC_ERROR;
+    }
+
+    return ret;
+}
+
+/* get the content of Device.Wifi.X_BROADCOM_COM_WlUnsetNvram */
+static char *get_unset_list(void)
+{
+    MdmPathDescriptor pathDesc;
+    PhlGetParamValue_t  *pParamValue = NULL;
+    char *nlist = NULL;
+    CmsRet cret;
+    UBOOL8 locked_here = FALSE;
+
+
+    if (cms_try_lock(&locked_here) != WLMDM_OK)
+    {
+        return NULL;
+    }
+
+    get_wlUnsetNvram_pathDesc(&pathDesc);
+
+    cret = cmsPhl_getParamValueFlags(&pathDesc, OGF_NO_VALUE_UPDATE, &pParamValue);
+    if (cret != CMSRET_SUCCESS)
+    {
+        cmsLog_error("cmsPhl_getParamValue error: %d", cret);
+    }
+    else
+    {
+        if (cmsUtl_strlen(pParamValue->pValue) > 0)
+        {
+            nlist = strdup(pParamValue->pValue);
+            if (nlist && (nvc_list_validate((const char*) nlist) == FALSE))
+            {
+                free(nlist);
+                nlist = NULL;
+            }
+        }
+        cmsPhl_freeGetParamValueBuf(pParamValue, 1);
+    }
+    cms_try_unlock(&locked_here);
+    return nlist;
+}
+
+/* save back to Device.Wifi.X_BROADCOM_COM_WlUnsetNvram */
+static WlmdmRet set_unset_list(const char *nlist)
+{
+    WlmdmRet ret = WLMDM_OK;
+    PhlSetParamValue_t paramValue = {0};
+    MdmPathDescriptor pathDesc;
+    CmsRet cret;
+    UBOOL8 locked_here = FALSE;
+
+    if (nlist == NULL)
+    {
+        return WLMDM_OK;
+    }
+
+    if (cms_try_lock(&locked_here) != WLMDM_OK)
+    {
+        return WLMDM_GENERIC_ERROR;
+    }
+
+    get_wlUnsetNvram_pathDesc(&pathDesc);
+
+    memcpy(&paramValue.pathDesc, &pathDesc, sizeof(MdmPathDescriptor));
+    paramValue.pParamType = "string";
+    paramValue.pValue = strdup(nlist);
+    paramValue.status = CMSRET_SUCCESS;
+
+    cret = cmsPhl_setParameterValues(&paramValue, 1);
+    if (cret != CMSRET_SUCCESS)
+    {
+        cmsLog_error("Failed to set parameter node: %d", cret);
+        ret = WLMDM_GENERIC_ERROR;
+    }
+
+    free(paramValue.pValue);
+    cms_try_unlock(&locked_here);
+    return ret;
+}
+
+UBOOL8 conv_unset_name_exist(const char *nvname)
+{
+    UBOOL8 result = FALSE;
+    char *nlist = NULL;
+ 
+    nlist = get_unset_list();
+ 
+    if (nlist != NULL)
+    {
+        result = nvc_list_exist(nlist, nvname);
+    }
+    return result;
+}
+
 static char *get_unmapped_list()
 {
     MdmPathDescriptor pathDesc;
@@ -624,6 +794,44 @@
    return ret;
 }
 
+/* Search MDM data model's parameter node:
+ *    Device.Wifi.X_BROADCOM_COM_WlUnsetNvram
+ * for the specified nvname.
+ * Input:  const char *nvname
+ *         size_t size
+ * Output: value
+ */
+static WlmdmRet conv_get_unset(const char *nvname)
+{
+    WlmdmRet ret = WLMDM_NOT_FOUND;
+    char *nlist = NULL;
+    UBOOL8 exist;
+
+    nlist = get_unset_list();
+
+    if (nlist != NULL)
+    {
+        char *val;
+        val = nvc_list_get(nlist, nvname, &exist);
+        if (val != NULL)
+        {
+            /* the val should be NULL for the unset nvrams */
+            ret = WLMDM_GENERIC_ERROR;
+	    free(val);
+        }
+        else if (exist == FALSE)
+        {
+            ret = WLMDM_NOT_FOUND;
+        }
+        else
+        {
+            ret = WLMDM_NULL_ENTRY;
+        }
+        free(nlist);
+    }
+    return ret;
+}
+
 static char* convert_value(MdmParamTypes from, MdmParamTypes to, const char *value)
 {
     char *buf = NULL;

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/conv.h
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/conv.h

@@ -59,5 +59,6 @@
 WlmdmRet conv_foreach(nvc_for_each_func for_each_func, void *data);
 WlmdmRet conv_prepare_save();
 WlmdmRet conv_save();
+UBOOL8 conv_unset_name_exist(const char *nvname);
 
 #endif

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/tr181_helper.c
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/tr181_helper.c

@@ -454,3 +454,12 @@
     INIT_INSTANCE_ID_STACK(&(pathDesc->iidStack));
     strncpy((char *)&pathDesc->paramName, "X_BROADCOM_COM_WlNvram", sizeof(pathDesc->paramName));
 }
+
+void get_wlUnsetNvram_pathDesc(MdmPathDescriptor *pathDesc)
+{
+    assert(pathDesc);
+    pathDesc->oid = MDMOID_DEV2_WIFI;
+    INIT_INSTANCE_ID_STACK(&(pathDesc->iidStack));
+    strncpy((char *)&pathDesc->paramName, "X_BROADCOM_COM_WlUnsetNvram", sizeof(pathDesc->paramName));
+}
+

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/tr98_helper.c
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/tr98_helper.c

@@ -250,3 +250,11 @@
     INIT_INSTANCE_ID_STACK(&(pathDesc->iidStack));
     strncpy((char *)&pathDesc->paramName, "WlanNvram", sizeof(pathDesc->paramName));
 }
+
+void get_wlUnsetNvram_pathDesc(MdmPathDescriptor *pathDesc)
+{
+    assert(pathDesc);
+    pathDesc->oid = MDMOID_WLAN_NVRAM;
+    INIT_INSTANCE_ID_STACK(&(pathDesc->iidStack));
+    strncpy((char *)&pathDesc->paramName, "WlanUnsetNvram", sizeof(pathDesc->paramName));
+}

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/wlmdm.c
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/wlmdm.c

@@ -61,8 +61,6 @@
 
 static StagedInfo *staged_info = NULL;
 static const char STAGED_FILE[] = "/tmp/nvm_staged";
-static StagedInfo *unset_list = NULL;
-static const char UNSET_FILE[] = "/tmp/unset_list";
 
 WlmdmRet wlmdm_init()
 {
@@ -77,13 +75,8 @@
         staged_info = staged_init(STAGED_FILE);
     }
 
-    if (unset_list == NULL)
+    if (staged_info == NULL)
     {
-        unset_list = staged_init(UNSET_FILE);
-    }
-
-    if ((staged_info == NULL) || (unset_list == NULL))
-    {
         wlmdm_destroy();
         return WLMDM_GENERIC_ERROR;
     }
@@ -99,12 +92,6 @@
     {
         staged_info = NULL;
     }
-
-    ret = staged_free(unset_list);
-    if (ret == STAGED_OK)
-    {
-        unset_list = NULL;
-    }
 }
 
 WlmdmRet wlmdm_nvram_set(const char *nvname, const char *value)
@@ -133,14 +120,10 @@
 
     if (value == NULL)
     {
-        /* add record in unset_list since nvram is unset */
-        staged_set(unset_list, nvname, value);
         ret = (conv_unset(nvname) == WLMDM_OK) ? 0 : -1;
     }
     else
     {
-        /* remove record in unset_list since nvram is set */
-        staged_delete(unset_list, nvname);
         ret = (conv_set(nvname, value) == WLMDM_OK) ? 0 : -1;
     }
     return ret;
@@ -190,24 +173,11 @@
     }
     else if (r == STAGED_NOT_FOUND)
     {
-        /* We haven't found anything in staged_info list. Search in unset_list then. */
-        r = staged_get(unset_list, nvname, value, size);
-        if (r == STAGED_NOT_FOUND)
-        {
-           /*
-            * nvname not found in either staged_list or unset_list.
-            * Search MDM for corresponding parameter node instance instead.
-            */
-            ret = conv_get(nvname, value, size);
-        }
-        else if (r == STAGED_GENERIC_ERROR)
-        {
-            ret = WLMDM_GENERIC_ERROR;
-        }
-        else
-        {
-            ret = WLMDM_NOT_FOUND;
-        }
+       /*
+        * nvname not found in staged_list.
+        * Search MDM for corresponding parameter node instance instead.
+        */
+        ret = conv_get(nvname, value, size);
     }
     else
     {
@@ -246,7 +216,7 @@
 {
     if (FALSE == staged_name_exist(staged_info, nvname))
     {
-        if (FALSE == staged_name_exist(unset_list, nvname))
+        if (FALSE == conv_unset_name_exist(nvname))
         {
             return print_nvram(nvname, value, data);
         }
@@ -260,14 +230,14 @@
  * 1. Dump out all "set" configurations from staged list.
  * 2. Dump out all NVRAM configurations in nvm_param_mapping_table by locating all their subtrees in MDM.
  *    if such configurations satisfy below conditions:
- *     Its corresponding NVRAM configuration has not been recorded in staged list and unset list.
+ *     Its corresponding NVRAM configuration has not been recorded in staged list and Device.Wifi.X_BROADCOM_COM_WlUnsetNvram.
  * 3. Dump out all special NVRAM configurations, by using data from MDM,
  *    if such configurations satisfy below conditions:
- *     Its corresponding NVRAM configuration has not been recorded in staged list and unset list.
+ *     Its corresponding NVRAM configuration has not been recorded in staged list and Device.Wifi.X_BROADCOM_COM_WlUnsetNvram.
  * 4. Dump out all NVRAM configurations from MDM parameter node:
  *     Device.Wifi.X_BRODACOM_COM_WlNVRAM
  *    if such configurations satisfy below conditions:
- *     Its corresponding NVRAM configuration has not been recorded in staged list and unset list.
+ *     Its corresponding NVRAM configuration has not been recorded in staged list and Device.Wifi.X_BROADCOM_COM_WlUnsetNvram.
  *
  */
 void wlmdm_nvram_dump()

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/wlmdm_lib.h
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/userspace/private/libs/wlmdm/src/wlmdm_lib.h

@@ -54,6 +54,7 @@
 typedef enum wlmdm_ret
 {
     WLMDM_OK,
+    WLMDM_NULL_ENTRY,
     WLMDM_NOT_FOUND,
     WLMDM_INVALID_PARAM,
     WLMDM_GENERIC_ERROR
