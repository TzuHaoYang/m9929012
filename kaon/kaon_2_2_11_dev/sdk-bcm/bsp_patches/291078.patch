
+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/bcmdrivers/broadcom/char/bcmlibs/impl1/bcm_pktfwd.c
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/bcmdrivers/broadcom/char/bcmlibs/impl1/bcm_pktfwd.c

@@ -1111,6 +1111,8 @@
         d3lut_elem->key.incarn = 0x0;           /* incarn incremented per put */
         d3lut_elem->key.domain = pool;          /* pool aka domain */
 
+        dll_init(&d3lut_elem->sta_list);        /* initialize sta list */
+
         D3FWD_EXT_PUT(d3lut_elem->ext);         /* clobber the elem extension */
 
         if (++index % D3LUT_ELEM_MAX)           /* pool not full */
@@ -1597,6 +1599,29 @@
  * CAUTION : No lock is taken
  * -----------------------------------------------------------------------------
  */
+void
+d3fwd_sta_dump(dll_t *sta_list)
+{
+    int i = 0;
+    dll_t *item;
+    d3lut_sta_t *sta;
+
+    if (dll_empty(sta_list))
+        return;
+
+    printk("\t STAs: [addr] \t\t\t[d3lut_elem] \t\t[flag]\n");
+    dll_for_each(item, sta_list)
+    {
+        sta = (d3lut_sta_t *)item;
+        printk("\t\t[%02x:%02x:%02x:%02x:%02x:%02x] \t[%px] \t[0x%x]\n",
+               sta->mac[0], sta->mac[1], sta->mac[2], sta->mac[3], sta->mac[4], sta->mac[5],
+               sta->d3lut_elem, sta->flag);
+        if (i++ > PKTFWD_ENDPOINTS_MAX) {
+               printk("%s: ERROR sta num is greater than %d!\n", __FUNCTION__, PKTFWD_ENDPOINTS_MAX);
+               break;
+        }
+    }
+}
 
 void
 d3fwd_elem_dump(d3lut_elem_t * d3lut_elem)
@@ -1607,6 +1632,7 @@
 #if defined(BCM_D3FWD)
     d3fwd_ext_dump(&d3lut_elem->ext);
 #endif
+    d3fwd_sta_dump(&d3lut_elem->sta_list);
 }   /* d3fwd_elem_dump() */
 
 

+++ //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/bcmdrivers/broadcom/include/bcm963xx/bcm_pktfwd.h
--- //depot/CommEngine/patches/WLAN/PATCH_502L07_P1/bcmdrivers/broadcom/include/bcm963xx/bcm_pktfwd.h

@@ -1961,6 +1961,14 @@
 #error "ucast_pktlist supports 8 unicast packet priorities"
 #endif
 
+/* each station structure */
+typedef struct d3lut_sta
+{
+    dll_t       node;
+    uint8_t     mac[6]; /*ETHER_ADDR_LEN*/
+    uint16_t    flag;                   /* flag for this sta */
+    struct d3lut_elem *d3lut_elem;      /* associated d3lut_elem */
+} d3lut_sta_t;
 
 /**
  * -----------------------------------------------------------------------------
@@ -2036,6 +2044,9 @@
     /* flags for each netdevice/wlif */
     uint32_t            flags;
 
+    /* sta free list per intf */
+    dll_t               sta_free_list;
+    d3lut_sta_t         *sta_pool;
 };
 
 extern void d3fwd_wlif_stats_dump(d3fwd_wlif_stats_t * d3fwd_wlif_stats,
@@ -2484,6 +2495,9 @@
      */
     d3fwd_ext_t     ext;
 
+    /* station list associated with this d3lut_elem */
+    dll_t           sta_list;
+
 } __attribute__ ((packed));
 
 
