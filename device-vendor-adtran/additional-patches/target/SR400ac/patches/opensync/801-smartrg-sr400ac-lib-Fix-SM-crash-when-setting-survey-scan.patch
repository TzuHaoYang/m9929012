From: Richard Le <rle@plume.com>
Date: Thu, 29 Apr 2021 09:56:19 +0800
Subject: [PATCH] lib: Fix SM crash when setting survey scan

SM will crash when setting survey scan due to wrong logic and prototype
missing

Signed-off-by: Richard Le <rle@plume.com>
---
 platform/cfg80211/src/lib/nl80211/inc/nl80211_stats.h | 38 +++++++++++++++++++++++++++++
 platform/cfg80211/src/lib/nl80211/src/nl80211_scan.c  | 38 +++++++++++++++++++++++------
 platform/cfg80211/src/lib/nl80211/src/nl80211_stats.c | 11 ---------
 3 files changed, 69 insertions(+), 18 deletions(-)

diff --git a/platform/cfg80211/src/lib/nl80211/inc/nl80211_stats.h b/platform/cfg80211/src/lib/nl80211/inc/nl80211_stats.h
index 4c77288..eed25fd 100644
--- a/platform/cfg80211/src/lib/nl80211/inc/nl80211_stats.h
+++ b/platform/cfg80211/src/lib/nl80211/inc/nl80211_stats.h
@@ -35,4 +35,42 @@ static inline void target_survey_record_free(target_survey_record_t *record)
         free(record);
 }
 
+
+
+int nl80211_scan_trigger(struct nl_global_info *nl_sm_global,
+                         char *ifname, uint32_t *chan_list, uint32_t chan_num,
+                         int dwell_time, radio_scan_type_t scan_type,
+                         target_scan_cb_t *scan_cb, void *scan_ctx);
+
+bool nl80211_stats_scan_start(struct nl_global_info *nl_sm_global,
+	        	      radio_entry_t *radio_cfg, uint32_t *chan_list,
+                              uint32_t chan_num, radio_scan_type_t scan_type,
+                              int32_t dwell_time, target_scan_cb_t *scan_cb,
+                              void *scan_ctx);
+struct nl80211_scan *nl80211_scan_find(const char *name);
+void nl80211_scan_del(struct nl80211_scan *nl80211_scan);
+void nl80211_scan_finish(char *name, bool state);
+int nl80211_scan_abort(struct nl_global_info *nl_sm_global, char *ifname);
+bool nl80211_stats_scan_stop(struct nl_global_info *nl_sm_global,
+                             radio_entry_t *radio_cfg,
+                             radio_scan_type_t scan_type);
+int nl80211_scan_dump(struct nl_global_info *nl_sm_global,
+                      struct nl_call_param *nl_call_param);
+bool nl80211_stats_scan_get(struct nl_global_info *nl_sm_global,
+                            radio_entry_t *radio_cfg, uint32_t *chan_list,
+                            uint32_t chan_num, radio_scan_type_t scan_type,
+                            dpp_neighbor_report_data_t *scan_results);
+
+bool nl80211_stats_clients_get(struct nl_global_info *nl_sm_global,
+                               radio_entry_t *radio_cfg,
+                               radio_essid_t *essid,
+                               target_stats_clients_cb_t *client_cb,
+                               ds_dlist_t *client_list, void *client_ctx);
+
+bool nl80211_stats_survey_get(struct nl_global_info *nl_sm_global,
+	                      radio_entry_t *radio_cfg, uint32_t *chan_list,
+                              uint32_t chan_num, radio_scan_type_t scan_type,
+                              target_stats_survey_cb_t *survey_cb,
+                              ds_dlist_t *survey_list, void *survey_ctx);
+
 #endif /* STATS_NETLINK_H_INCLUDED */
diff --git a/platform/cfg80211/src/lib/nl80211/src/nl80211_scan.c b/platform/cfg80211/src/lib/nl80211/src/nl80211_scan.c
index 5db39a2..4df9322 100644
--- a/platform/cfg80211/src/lib/nl80211/src/nl80211_scan.c
+++ b/platform/cfg80211/src/lib/nl80211/src/nl80211_scan.c
@@ -48,7 +48,8 @@ int nl80211_scan_trigger(struct nl_global_info *nl_sm_global,
     int if_index;
     struct nl_msg *msg;
     struct nlattr *freq;
-    unsigned int i;
+    unsigned int i, flags = 0;
+    int ret = 0;
 
     if ((if_index = util_sys_ifname_to_idx(ifname)) < 0)
         return -EINVAL;
@@ -59,16 +60,29 @@ int nl80211_scan_trigger(struct nl_global_info *nl_sm_global,
 
     nla_put_u32(msg, NL80211_ATTR_IFINDEX, if_index);
     LOGT("%s: not setting dwell time\n", ifname);
+
+    /* Add the ap-force flag, otherwise the scan fails on wifi6 APs */
+    flags |= NL80211_SCAN_FLAG_AP;
+    nla_put(msg, NL80211_ATTR_SCAN_FLAGS, sizeof(uint32_t), &flags);
+
     freq = nla_nest_start(msg, NL80211_ATTR_SCAN_FREQUENCIES);
     for (i = 0; i < chan_num; i++)
          nla_put_u32(msg, i, util_chan_to_freq(chan_list[i]));
     nla_nest_end(msg, freq);
 
-    if (nl80211_scan_add(ifname, scan_cb, scan_ctx))
-        return false;
+    ret = nl80211_scan_add(ifname, scan_cb, scan_ctx);
+    if (ret)
+    {
+        LOG(ERR,"%s: scan add failed %d\n", ifname, ret);
+        return -EINVAL;
+    }
 
-    nlmsg_send_and_recv(nl_sm_global, msg, nl80211_scan_trigger_recv, NULL);
-    return 0;
+    ret = nlmsg_send_and_recv(nl_sm_global, msg, nl80211_scan_trigger_recv, NULL);
+	if (ret)
+    {
+        LOG(ERR, "%s: scan request failed %d\n", ifname, ret);
+    }
+	return ret;
 }
 
 bool nl80211_stats_scan_start(struct nl_global_info *nl_sm_global,
@@ -87,9 +101,8 @@ bool nl80211_stats_scan_start(struct nl_global_info *nl_sm_global,
 
     if (ret == false) {
         LOG(ERR, "%s: failed to trigger scan, aborting", radio_cfg->if_name);
-        (*scan_cb)(scan_ctx, ret);
     }
-    return true;
+    return ret;
 }
 
 static int nl80211_scan_abort_recv(struct nl_msg *msg, void *arg)
@@ -115,6 +128,17 @@ void nl80211_scan_del(struct nl80211_scan *nl80211_scan)
     free(nl80211_scan);
 }
 
+void nl80211_scan_finish(char *name, bool state)
+{
+    struct nl80211_scan *nl80211_scan = nl80211_scan_find(name);
+
+    if (nl80211_scan) {
+        LOGN("%s: calling context cb", nl80211_scan->name);
+        (*nl80211_scan->scan_cb)(nl80211_scan->scan_ctx, state);
+        nl80211_scan_del(nl80211_scan);
+    }
+}
+
 int nl80211_scan_abort(struct nl_global_info *nl_sm_global, char *ifname)
 {
     int if_index;
diff --git a/platform/cfg80211/src/lib/nl80211/src/nl80211_stats.c b/platform/cfg80211/src/lib/nl80211/src/nl80211_stats.c
index 4f66384..0bb0d84 100644
--- a/platform/cfg80211/src/lib/nl80211/src/nl80211_stats.c
+++ b/platform/cfg80211/src/lib/nl80211/src/nl80211_stats.c
@@ -115,17 +115,6 @@ int nl80211_get_tx_chainmask(char *ifname, unsigned int *mask)
     return nlmsg_send_and_recv(&nl_sm_global, msg, nl80211_txchainmask_recv, mask);
 }
 
-static void nl80211_scan_finish(char *name, bool state)
-{
-    struct nl80211_scan *nl80211_scan = nl80211_scan_find(name);
-
-    if (nl80211_scan) {
-        LOGN("%s: calling context cb", nl80211_scan->name);
-        (*nl80211_scan->scan_cb)(nl80211_scan->scan_ctx, state);
-        nl80211_scan_del(nl80211_scan);
-    }
-}
-
 static int nl_event_parse(struct nl_msg *msg, void *arg)
 {
     struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
-- 
2.25.1
