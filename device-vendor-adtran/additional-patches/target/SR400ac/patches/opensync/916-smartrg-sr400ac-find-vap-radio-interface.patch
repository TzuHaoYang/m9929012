--- a/platform/cfg80211/src/lib/target/target_cfg80211.c
+++ b/platform/cfg80211/src/lib/target/target_cfg80211.c
@@ -859,19 +859,83 @@ util_wifi_get_phy_all_vifs(const char *p
     return 0;
 }
 
+static bool
+util_lookup_rconf_by_vif_ifname(struct schema_Wifi_Radio_Config *rconf,
+                               const char *ifname)
+{
+    const struct schema_Wifi_Radio_Config *rc;
+    const struct schema_Wifi_Radio_State *rs;
+    struct schema_Wifi_VIF_Config vconf;
+    struct schema_Wifi_VIF_State vstate;
+    json_t *where;
+    void *buf;
+    int n;
+    int i;
+    ovsdb_table_t table_Wifi_Radio_Config;
+    ovsdb_table_t table_Wifi_VIF_Config;
+    OVSDB_TABLE_INIT(Wifi_Radio_Config, if_name);
+    OVSDB_TABLE_INIT(Wifi_VIF_Config, if_name);
+
+    memset(rconf, 0, sizeof(*rconf));
+
+    if (!(where = ovsdb_where_simple(SCHEMA_COLUMN(Wifi_VIF_Config, if_name), ifname)))
+        return false;
+    if (ovsdb_table_select_one_where(&table_Wifi_VIF_Config, where, &vconf)) {
+        if ((buf = ovsdb_table_select_where(&table_Wifi_Radio_Config, NULL, &n))) {
+            for (n--; n >= 0; n--) {
+                rc = buf + (n * table_Wifi_Radio_Config.schema_size);
+                for (i = 0; i < rc->vif_configs_len; i++) {
+                    if (!strcmp(rc->vif_configs[i].uuid, vconf._uuid.uuid)) {
+                        memcpy(rconf, rc, sizeof(*rc));
+                        free(buf);
+                        LOGD("%s: found radio %s via vif config", ifname, rconf->if_name);
+                        return true;
+                    }
+                }
+            }
+            free(buf);
+        }
+    }
+
+    return false;
+}
+
+static bool
+util_lookup_vconf_by_ifname(struct schema_Wifi_VIF_Config *vconf,
+                           const char *ifname)
+{
+    ovsdb_table_t table_Wifi_VIF_Config;
+    OVSDB_TABLE_INIT(Wifi_VIF_Config, if_name);
+
+    json_t *where = ovsdb_where_simple(SCHEMA_COLUMN(Wifi_VIF_Config, if_name), ifname);
+    if (!where)
+        return false;
+    return ovsdb_table_select_one_where(&table_Wifi_VIF_Config, where, vconf);
+}
+
 int util_get_vif_radio(const char *in_vif, char *phy_buf, int len)
 {
     char *vif;
     char vif_list[512];
     char *vifr = vif_list;
+    struct schema_Wifi_Radio_Config rconf;
 
 #ifdef CONFIG_PLATFORM_MAC80211
     char sys_path[128];
     snprintf(sys_path, sizeof(sys_path), "/sys/class/net/%s/phy80211/name", in_vif);
     if (util_file_read_str(sys_path, phy_buf, len) < 0)
-        return -1;
+        goto rconf_name;
     rtrimws(phy_buf);
     return 0;
+
+rconf_name:
+    if (util_lookup_rconf_by_vif_ifname(&rconf, in_vif)) {
+        LOGD("%s %s: lookup rconf if_name %s", __func__, in_vif, rconf.if_name);
+	strscpy(phy_buf, rconf.if_name, len);
+        return 0;
+    }
+    return -1;
+
 #else
     if (util_wifi_get_phy_all_vifs(in_vif, vif_list, sizeof(vif_list))) {
         LOGE("%s: get vif list failed", in_vif);
@@ -1125,11 +1189,16 @@ util_get_vif_chan(const char *vif,
 static int
 util_get_opmode(const char *vif, char *opmode, int len)
 {
+    struct schema_Wifi_VIF_Config vconf;
     if (vif && strlen(vif) == 0)
         return 0;
     if (nl_req_get_mode(&target_nl_global, vif, opmode, len) == true)
         return 1;
-
+    if (util_lookup_vconf_by_ifname(&vconf, vif)) {
+        LOGI("%s %s: lookup vconf mode %s", __func__, vif, vconf.mode);
+        strscpy(opmode, vconf.mode, len);
+        return 1;
+    }
     LOGW("%s: failed to get opmode", vif);
     return 0;
 }
@@ -1178,6 +1247,24 @@ util_get_tx_power(const char *phy)
     return txpwr;
 }
 
+static bool
+util_vif_is_home(char *vif)
+{
+    if (strcmp(vif, "wifi2g") && strcmp(vif, "wifi5g"))
+        return false;
+    return true;
+}
+
+static bool
+util_vif_check_home_active(char *vif)
+{
+    if (strstr(vif, "2") && !util_is_vif_active("/sys/class/net", "wifi2g"))
+        return true;
+    if (strstr(vif, "5") && !util_is_vif_active("/sys/class/net", "wifi5g"))
+        return true;
+
+    return false;
+}
 /******************************************************************************
  * Target callback helpers
  *****************************************************************************/
@@ -1721,6 +1808,7 @@ hostap_ctrl_discover(const char *bss)
     const char *phy;
     char mode[32] = {};
     char p_buf[32] = {0};
+    struct schema_Wifi_VIF_Config vconf;
 
     if (util_get_vif_radio(bss, p_buf, sizeof(p_buf))) {
         LOGW("%s: failed to get bss radio", bss);
@@ -3048,6 +3136,12 @@ target_vif_config_set2(const struct sche
         if (!rconf || !vconf->enabled)
             goto done;
 
+        /* need create home vap first */
+        if (!util_vif_is_home(vif) && !util_vif_check_home_active(vif)) {
+            LOGI("%s: Home VAP inactive, need to delay interface create",vif);
+            return false;
+        }
+
         if (util_wifi_gen_macaddr(phy, macaddr, vconf->vif_radio_idx)) {
             LOGW("%s: failed to generate mac address: %d (%s)", vif, errno, strerror(errno));
             return false;
@@ -3158,7 +3252,7 @@ target_vif_config_set2(const struct sche
         hostap_ctrl_wps_session(vif, vconf->wps, vconf->wps_pbc);
         util_ovsdb_wpa_clear(vconf->if_name);
     }
-#if 1  //WM_MODEL_SR400AC_PATCH
+#if 0  //WM_MODEL_SR400AC_PATCH
     if ((strlen(buf) == 0) && (!(err = util_net_get_macaddr(vif, macaddr))))
     {
         /* Set the mac-address using ip link command */ 
