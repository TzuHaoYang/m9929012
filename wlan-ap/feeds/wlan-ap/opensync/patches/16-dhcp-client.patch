Index: opensync-2.0.5.0/src/lib/datapipeline/inc/dpp_network_probe.h
===================================================================
--- opensync-2.0.5.0.orig/src/lib/datapipeline/inc/dpp_network_probe.h
+++ opensync-2.0.5.0/src/lib/datapipeline/inc/dpp_network_probe.h
@@ -7,7 +7,7 @@
 #include "dpp_types.h"
 
 #define MAX_IP_ADDR_SIZE 16
-
+#define MAX_IF_NAME_SIZE 16
 typedef enum
 {
     SUD_down = 0,
@@ -26,7 +26,7 @@ typedef struct
 /* VLAN probe metrics */
 typedef struct
 {
-    char*	          vlanIF;
+    char	          vlanIF[MAX_IF_NAME_SIZE];
     StateUpDown_t           dhcpState;
     uint32_t              dhcpLatency;
     StateUpDown_t           dnsState;
Index: opensync-2.0.5.0/src/lib/datapipeline/src/dppline.c
===================================================================
--- opensync-2.0.5.0.orig/src/lib/datapipeline/src/dppline.c
+++ opensync-2.0.5.0/src/lib/datapipeline/src/dppline.c
@@ -647,7 +647,8 @@ static bool dppline_copysts(dppline_stat
            {
                 dpp_network_probe_report_data_t *report_data = sts;
                 memcpy(&dst->u.network_probe.record.dns_probe, &report_data->record.dns_probe, sizeof(dpp_dns_metrics_t));
-                dst->u.network_probe.timestamp_ms = report_data->timestamp_ms;
+                memcpy(&dst->u.network_probe.record.vlan_probe, &report_data->record.vlan_probe, sizeof(dpp_vlan_metrics_t));
+		dst->u.network_probe.timestamp_ms = report_data->timestamp_ms;
            }
            break;
         default:
@@ -1619,6 +1620,17 @@ static void dppline_add_stat_network_pro
     sr->dns_probe->latency = network_probe->record.dns_probe.latency;
     sr->dns_probe->has_latency = true;
 
+    sr->vlan_probe = malloc(sizeof(*sr->vlan_probe));
+    size += sizeof(*sr->vlan_probe);
+    assert(sr->vlan_probe);
+    sts__vlanmetrics__init(sr->vlan_probe);
+    sr->vlan_probe->vlanif = strdup(network_probe->record.vlan_probe.vlanIF);
+    size += strlen(network_probe->record.vlan_probe.vlanIF) + 1;
+    sr->vlan_probe->dhcpstate = network_probe->record.vlan_probe.dhcpState;
+    sr->vlan_probe->has_dhcpstate = true;
+    sr->vlan_probe->dhcplatency = network_probe->record.vlan_probe.dhcpLatency;
+    sr->vlan_probe->has_dhcplatency = true;
+
 }
 
 static void dppline_add_stat_bs_client(Sts__Report * r, dppline_stats_t * s)
